Test cases for 0-add_integer module
===================================

The module takes 2 integers and returns their sum

Usage
=====

Importing function into the module:
    >>> add_integer = __import__('0-add_integer').add_integer

Adding 2 positive integers (a = 1, b = 2)
    >>> add_integer(1, 2)
    3

Adding 2 negative integers (a = -1, b = -2)
    >>> add_integer(-1, -2)
    -3
    
Adding 1 positive integers and 1 negative integer(a = 1, b = -2)
    >>> add_integer(1, -2)
    -1

Adding 2 positive floats (a = 1.2, b = 2.9)
    >>> add_integer(1.2, 2.9)
    3
    
Adding 2 negative floats (a = -1.6, b = -2.3)
    >>> add_integer(-1.6, -2.3)
    -3

Adding 1 positive integer and 1 positive float (a = 1, b = 9.2)
    >>> add_integer(1, 9.2)
    10

Adding 1 positive integer and 1 negative float (a = 1, b = -3.2)
    >>> add_integer(1, -3.2)
    -2

Adding when only the value of a is defined (a = 9, b = 98)
    >>> add_integer(9)
    107

Adding when no value is input into the function (b = 98)
    >>> add_integer(None)
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Adding both arguments are characters (a = 'a', b = 'b')
    >>> add_integer('a', 'b')
    Traceback (most recent call last):
	      ...
    TypeError: a must be an integer

Adding when b is a character (a = 9, b = 'b')
    >>> add_integer(9, 'b')
    Traceback (most recent call last):
              ...
    TypeError: b must be an integer

Adding both arguments are strings (a = "Hello", b = "World")
    >>> add_integer("Hello", "World")
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding when a is a string and b is an integer (a = "Hello", b = 6)
    >>> add_integer("Hello", 6)
    Traceback (most recent call last):
              ...
    TypeError: a must be an integer

Adding when a is an integer and b is a string (a = 6, b = "Whoa")
    >>> add_integer(6, "Whoa")
    Traceback (most recent call last):
              ...
    TypeError: b must be an integer

Case Overflow:

    >>> add_integer(float('inf'), 0)
    Traceback (most recent call last):
    	      ...
    OverflowError: cannot convert float infinity to integer

Case Overflow 2:

    >>> add_integer(float('inf'), float('-inf'))
    Traceback (most recent call last):
    	      ...
    OverflowError: cannot convert float infinity to integer

Case NaN 1:

    >>> add_integer(0, float('nan'))
    Traceback (most recent call last):
    	      ...
    ValueError: cannot convert float NaN to integer

Case NaN 2:

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    	      ...
    ValueError: cannot convert float NaN to integer
